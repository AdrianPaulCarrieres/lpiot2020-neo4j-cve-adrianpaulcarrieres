
// Uniques constraints for indexes and for well, uniqueness
CREATE CONSTRAINT ON (cve:CVE) ASSERT cve.id IS UNIQUE;
CREATE CONSTRAINT ON (vendor:VENDOR) ASSERT vendor.name IS UNIQUE;
CREATE CONSTRAINT ON (severity_v2:SEVERITY_V2) ASSERT severity_v2.severity IS UNIQUE;
CREATE CONSTRAINT ON (severity_v3:SEVERITY_V3) ASSERT severity_v3.severity IS UNIQUE;
CREATE CONSTRAINT ON (product:PRODUCT) ASSERT product.name IS UNIQUE;
CREATE CONSTRAINT ON (version:PRODUCT_VERSION) ASSERT version.name IS UNIQUE;

UNWIND ['output-nvdcve-1.1-2021.json'] as filename

CALL apoc.load.json(filename) YIELD value AS entry

MERGE (cve:CVE {id: entry.id})
    SET cve.description = entry.description

MERGE (severity_v2:SEVERITY_V2 {severity: coalesce(entry.severity_v2, "Unknown")})
MERGE (severity_v3:SEVERITY_V3 {severity: coalesce(entry.severity_v3, "Unknown")})

MERGE (cve) -[:SCORED]-> (severity_v2)
MERGE (cve) -[:SCORED]-> (severity_v3)

FOREACH (entry_product IN entry.products | 
    MERGE (vendor:VENDOR {name: entry_product.vendor})
    MERGE (product:PRODUCT {name: entry_product.product})
    MERGE (version:PRODUCT_VERSION {name: entry_product.vendor + '_' + entry_product.product + '_' + entry_product.version})

    MERGE (cve) -[:FOR_PRODUCT]-> (product)
    MERGE (product) -[:FROM]-> (vendor)
    MERGE (cve)-[:FOR_VERSION]-> (version)
    MERGE (version)-[:OF]-> (product)
)


// Requests

//1. Quels sont les fournisseurs ayant le plus de CVE
MATCH (v:VENDOR)<--(p:PRODUCT)<--(c:CVE) RETURN count(c) AS nb_cve, v.name  ORDER BY  nb_cve DESC


//2. Fournisseur ayant le plus de cve par produit
MATCH (v:VENDOR)<-[:FROM]-(p:PRODUCT)<-[r:FOR_PRODUCT]-(c:CVE) RETURN v.name, p.name, count(r) as nb  ORDER BY nb DESC

//3. Groupé par sévérité
MATCH (v:VENDOR)<-[:FROM]-(p:PRODUCT)<--(c:CVE)-[r:SCORED]->(s:SEVERITY_V3) RETURN v.name, collect(p.name), s.severity, count(r) as nb  ORDER BY nb DESC

// avec les 2 versions du cvss
MATCH (v:VENDOR)<-[:FROM]-(p:PRODUCT)<--(c:CVE)-[rv3:SCORED]->(s1:SEVERITY_V3), (c)-[rv2]->(s2:SEVERITY_V2) RETURN v.name, collect(p.name), s1.severity, s2.severity, (count(rv2) + count(rv3)) as nb  ORDER BY nb DESC

//4. Répartition par sévérité
MATCH (c:CVE)-->(sv2:SEVERITY_V2) MATCH (c)-->(sv3:SEVERITY_V3) RETURN collect(c.id) as CVE_List, count(c.id) AS number_of_cve, sv2.severity, sv3.severity ORDER BY sv3.severity, sv2.severity