defmodule CveExplorerWeb.PageLive do
  use CveExplorerWeb, :live_view

  import Bolt.Sips

  @impl true
  def mount(_params, _session, socket) do
    vendors = get_vendors()

    vendor = Enum.at(vendors, 0) || "No vendor registered"

    products = get_products_by_vendor(vendor)

    product = Enum.at(products, 0) || "No product registered"

    versions = get_versions_of_product(product)

    version = Enum.at(versions, 0) || "No version registered"

    cves = get_cves(product, version) || ["No CVEs registered"]

    {:ok,
     assign(socket,
       vendor: vendor,
       vendors: vendors,
       product: product,
       products: products,
       version: version,
       versions: versions,
       cves: cves
     )}
  end

  @impl true
  def handle_event("vendor_selected", %{"vendor" => vendor}, socket) do
    products = get_products_by_vendor(vendor)

    product = Enum.at(products, 0) || "No product registered"

    versions = get_versions_of_product(product)

    version = Enum.at(versions, 0) || "No version registered"

    cves = get_cves(product, version) || ["No CVEs registered"]

    {:noreply,
     assign(socket,
       vendor: vendor,
       product: product,
       products: products,
       version: version,
       versions: versions,
       cves: cves
     )}
  end

  @impl true
  def handle_event("product_selected", %{"product" => product}, socket) do
    versions = get_versions_of_product(product)

    version = Enum.at(versions, 0) || "No version registered"

    cves = get_cves(product, version) || ["No CVEs registered"]

    {:noreply, assign(socket, product: product, version: version, versions: versions, cves: cves)}
  end

  @impl true
  def handle_event("version_selected", %{"version" => version}, socket) do
    product = socket.assigns.product
    cves = get_cves(product, version) || ["No CVEs registered"]

    {:noreply, assign(socket, version: version, cves: cves)}
  end

  defp selected_attr(attr, attr),
    do: "selected=\"selected\""

  defp selected_attr(_, _), do: ""

  defp get_vendors() do
    conn = Bolt.Sips.conn()

    %{results: results} = query!(conn, "match (v:VENDOR) return v.name")

    Enum.sort(results, :asc) |> Enum.map(fn %{"v.name" => name} -> name end)
  end

  defp get_products_by_vendor(vendor) do
    conn = Bolt.Sips.conn()

    %{results: results} =
      query!(conn, "match (v:VENDOR {name: '#{vendor}'})<--(p:PRODUCT) return p.name")

    Enum.sort(results, :asc) |> Enum.map(fn %{"p.name" => name} -> name end)
  end

  defp get_versions_of_product(product) do
    IO.inspect(product, label: "ligne 84")

    conn = Bolt.Sips.conn()

    %{results: results} =
      query!(conn, "match (p:PRODUCT {name: '#{product}'})<--(v:PRODUCT_VERSION) return v.name")

    Enum.sort(results, :asc) |> Enum.map(fn %{"v.name" => name} -> name end)
  end

  defp get_cves(product, version) do
    conn = Bolt.Sips.conn()

    query =
      "match (p:PRODUCT {name: '#{product}'})<--(v:PRODUCT_VERSION {name: '#{version}'})<--(c:CVE) return c.id"

    %{results: results} = query!(conn, query)

    Enum.sort(results, :desc) |> Enum.map(fn %{"c.id" => name} -> name end)
  end
end
